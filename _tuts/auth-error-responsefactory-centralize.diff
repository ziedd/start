diff --git a/app/config/services.yml b/app/config/services.yml
index cb56c8b..2358222 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -19,7 +19,7 @@ services:
 
     api_exception_subscriber:
         class: AppBundle\EventListener\ApiExceptionSubscriber
-        arguments: ['%kernel.debug%', '@logger']
+        arguments: ['%kernel.debug%', '@api.response_factory', '@logger']
         tags:
             - { name: kernel.event_subscriber }
 
@@ -36,3 +36,6 @@ services:
     jwt_token_authenticator:
         class: AppBundle\Security\JwtTokenAuthenticator
         autowire: true
+
+    api.response_factory:
+        class: AppBundle\Api\ResponseFactory
diff --git a/src/AppBundle/Api/ResponseFactory.php b/src/AppBundle/Api/ResponseFactory.php
new file mode 100644
index 0000000..f514582
--- /dev/null
+++ b/src/AppBundle/Api/ResponseFactory.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace AppBundle\Api;
+
+use Symfony\Component\HttpFoundation\JsonResponse;
+
+class ResponseFactory
+{
+    public function createResponse(ApiProblem $apiProblem)
+    {
+        $data = $apiProblem->toArray();
+        // making type a URL, to a temporarily fake page
+        if ($data['type'] != 'about:blank') {
+            $data['type'] = 'http://localhost:8000/docs/errors#'.$data['type'];
+        }
+
+        $response = new JsonResponse(
+            $data,
+            $apiProblem->getStatusCode()
+        );
+        $response->headers->set('Content-Type', 'application/problem+json');
+
+        return $response;
+    }
+}
\ No newline at end of file
diff --git a/src/AppBundle/EventListener/ApiExceptionSubscriber.php b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
index 8f4dbff..84d78c2 100644
--- a/src/AppBundle/EventListener/ApiExceptionSubscriber.php
+++ b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
@@ -4,6 +4,7 @@ namespace AppBundle\EventListener;
 
 use AppBundle\Api\ApiProblem;
 use AppBundle\Api\ApiProblemException;
+use AppBundle\Api\ResponseFactory;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
@@ -14,11 +15,15 @@ use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 class ApiExceptionSubscriber implements EventSubscriberInterface
 {
     private $debug;
+
+    private $responseFactory;
+
     private $logger;
 
-    public function __construct($debug, LoggerInterface $logger)
+    public function __construct($debug, ResponseFactory $responseFactory, LoggerInterface $logger)
     {
         $this->debug = $debug;
+        $this->responseFactory = $responseFactory;
         $this->logger = $logger;
     }
 
@@ -60,17 +65,7 @@ class ApiExceptionSubscriber implements EventSubscriberInterface
             }
         }
 
-        $data = $apiProblem->toArray();
-        // making type a URL, to a temporarily fake page
-        if ($data['type'] != 'about:blank') {
-            $data['type'] = 'http://localhost:8000/docs/errors#'.$data['type'];
-        }
-
-        $response = new JsonResponse(
-            $data,
-            $apiProblem->getStatusCode()
-        );
-        $response->headers->set('Content-Type', 'application/problem+json');
+        $response = $this->responseFactory->createResponse($apiProblem);
 
         $event->setResponse($response);
     }
diff --git a/src/AppBundle/Security/JwtTokenAuthenticator.php b/src/AppBundle/Security/JwtTokenAuthenticator.php
index 9647839..37d72b3 100644
--- a/src/AppBundle/Security/JwtTokenAuthenticator.php
+++ b/src/AppBundle/Security/JwtTokenAuthenticator.php
@@ -3,6 +3,7 @@
 namespace AppBundle\Security;
 
 use AppBundle\Api\ApiProblem;
+use AppBundle\Api\ResponseFactory;
 use Doctrine\ORM\EntityManager;
 use Lexik\Bundle\JWTAuthenticationBundle\Encoder\JWTEncoderInterface;
 use Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor;
@@ -20,11 +21,13 @@ class JwtTokenAuthenticator extends AbstractGuardAuthenticator
 {
     private $jwtEncoder;
     private $em;
+    private $responseFactory;
 
-    public function __construct(JWTEncoderInterface $jwtEncoder, EntityManager $em)
+    public function __construct(JWTEncoderInterface $jwtEncoder, EntityManager $em, ResponseFactory $responseFactory)
     {
         $this->jwtEncoder = $jwtEncoder;
         $this->em = $em;
+        $this->responseFactory = $responseFactory;
     }
 
     public function getCredentials(Request $request)
@@ -88,6 +91,6 @@ class JwtTokenAuthenticator extends AbstractGuardAuthenticator
         $message = $authException ? $authException->getMessageKey() : 'Missing credentials';
         $apiProblem->set('detail', $message);
 
-        return new JsonResponse($apiProblem->toArray(), 401);
+        return $this->responseFactory->createResponse($apiProblem);
     }
 }
