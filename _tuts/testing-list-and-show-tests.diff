diff --git a/src/AppBundle/Test/ApiTestCase.php b/src/AppBundle/Test/ApiTestCase.php
index db6cb6c..5c6fee5 100644
--- a/src/AppBundle/Test/ApiTestCase.php
+++ b/src/AppBundle/Test/ApiTestCase.php
@@ -41,6 +41,8 @@ class ApiTestCase extends KernelTestCase
      */
     private $formatterHelper;
 
+    private $responseAsserter;
+
     public static function setUpBeforeClass()
     {
         self::$staticClient = new Client([
@@ -248,6 +250,18 @@ class ApiTestCase extends KernelTestCase
     }
 
     /**
+     * @return ResponseAsserter
+     */
+    protected function asserter()
+    {
+        if ($this->responseAsserter === null) {
+            $this->responseAsserter = new ResponseAsserter();
+        }
+
+        return $this->responseAsserter;
+    }
+
+    /**
      * @return EntityManager
      */
     protected function getEntityManager()
diff --git a/src/AppBundle/Test/ResponseAsserter.php b/src/AppBundle/Test/ResponseAsserter.php
new file mode 100644
index 0000000..628bc17
--- /dev/null
+++ b/src/AppBundle/Test/ResponseAsserter.php
@@ -0,0 +1,180 @@
+<?php
+
+namespace AppBundle\Test;
+
+use GuzzleHttp\Message\ResponseInterface;
+use Symfony\Component\PropertyAccess\Exception\RuntimeException;
+use Symfony\Component\PropertyAccess\PropertyAccess;
+use Symfony\Component\PropertyAccess\Exception\AccessException;
+use Symfony\Component\PropertyAccess\PropertyAccessor;
+
+/**
+ * Helper class to assert different conditions on Guzzle responses
+ */
+class ResponseAsserter extends \PHPUnit_Framework_Assert
+{
+    /**
+     * @var PropertyAccessor
+     */
+    private $accessor;
+
+    /**
+     * Asserts the array of property names are in the JSON response
+     *
+     * @param ResponseInterface $response
+     * @param array $expectedProperties
+     * @throws \Exception
+     */
+    public function assertResponsePropertiesExist(ResponseInterface $response, array $expectedProperties)
+    {
+        foreach ($expectedProperties as $propertyPath) {
+            // this will blow up if the property doesn't exist
+            $this->readResponseProperty($response, $propertyPath);
+        }
+    }
+
+    /**
+     * Asserts the specific propertyPath is in the JSON response
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyExists(ResponseInterface $response, $propertyPath)
+    {
+        // this will blow up if the property doesn't exist
+        $this->readResponseProperty($response, $propertyPath);
+    }
+
+    /**
+     * Asserts the given property path does *not* exist
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyDoesNotExist(ResponseInterface $response, $propertyPath)
+    {
+        try {
+            // this will blow up if the property doesn't exist
+            $this->readResponseProperty($response, $propertyPath);
+
+            $this->fail(sprintf('Property "%s" exists, but it should not', $propertyPath));
+        } catch (RuntimeException $e) {
+            // cool, it blew up
+            // this catches all errors (but only errors) from the PropertyAccess component
+        }
+    }
+
+    /**
+     * Asserts the response JSON property equals the given value
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param mixed $expectedValue
+     * @throws \Exception
+     */
+    public function assertResponsePropertyEquals(ResponseInterface $response, $propertyPath, $expectedValue)
+    {
+        $actual = $this->readResponseProperty($response, $propertyPath);
+        $this->assertEquals(
+            $expectedValue,
+            $actual,
+            sprintf(
+                'Property "%s": Expected "%s" but response was "%s"',
+                $propertyPath,
+                $expectedValue,
+                var_export($actual, true)
+            )
+        );
+    }
+
+    /**
+     * Asserts the response property is an array
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @throws \Exception
+     */
+    public function assertResponsePropertyIsArray(ResponseInterface $response, $propertyPath)
+    {
+        $this->assertInternalType('array', $this->readResponseProperty($response, $propertyPath));
+    }
+
+    /**
+     * Asserts the given response property (probably an array) has the expected "count"
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param integer $expectedCount
+     * @throws \Exception
+     */
+    public function assertResponsePropertyCount(ResponseInterface $response, $propertyPath, $expectedCount)
+    {
+        $this->assertCount((int)$expectedCount, $this->readResponseProperty($response, $propertyPath));
+    }
+
+    /**
+     * Asserts the specific response property contains the given value
+     *
+     * e.g. "Hello world!" contains "world"
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @param mixed $expectedValue
+     * @throws \Exception
+     */
+    public function assertResponsePropertyContains(ResponseInterface $response, $propertyPath, $expectedValue)
+    {
+        $actualPropertyValue = $this->readResponseProperty($response, $propertyPath);
+        $this->assertContains(
+            $expectedValue,
+            $actualPropertyValue,
+            sprintf(
+                'Property "%s": Expected to contain "%s" but response was "%s"',
+                $propertyPath,
+                $expectedValue,
+                var_export($actualPropertyValue, true)
+            )
+        );
+    }
+
+    /**
+     * Reads a JSON response property and returns the value
+     *
+     * This will explode if the value does not exist
+     *
+     * @param ResponseInterface $response
+     * @param string $propertyPath e.g. firstName, battles[0].programmer.username
+     * @return mixed
+     * @throws \Exception
+     */
+    public function readResponseProperty(ResponseInterface $response, $propertyPath)
+    {
+        if ($this->accessor === null) {
+            $this->accessor = PropertyAccess::createPropertyAccessor();
+        }
+
+        $data = json_decode((string)$response->getBody());
+
+        if ($data === null) {
+            throw new \Exception(sprintf(
+                'Cannot read property "%s" - the response is invalid (is it HTML?)',
+                $propertyPath
+            ));
+        }
+
+        try {
+            return $this->accessor->getValue($data, $propertyPath);
+        } catch (AccessException $e) {
+            // it could be a stdClass or an array of stdClass
+            $values = is_array($data) ? $data : get_object_vars($data);
+
+            throw new AccessException(sprintf(
+                'Error reading property "%s" from available keys (%s)',
+                $propertyPath,
+                implode(', ', array_keys($values))
+            ), 0, $e);
+        }
+    }
+}
diff --git a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
index e2a0c5f..6d7b9cf 100644
--- a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
+++ b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
@@ -42,12 +42,30 @@ class ProgrammerControllerTest extends ApiTestCase
 
         $response = $this->client->get('/api/programmers/UnitTester');
         $this->assertEquals(200, $response->getStatusCode());
-        $data = $response->json();
-        $this->assertEquals(array(
+        $this->asserter()->assertResponsePropertiesExist($response, array(
             'nickname',
             'avatarNumber',
             'powerLevel',
             'tagLine'
-        ), array_keys($data));
+        ));
+        $this->asserter()->assertResponsePropertyEquals($response, 'nickname', 'UnitTester');
+    }
+
+    public function testGETProgrammersCollection()
+    {
+        $this->createProgrammer(array(
+            'nickname' => 'UnitTester',
+            'avatarNumber' => 3,
+        ));
+        $this->createProgrammer(array(
+            'nickname' => 'CowboyCoder',
+            'avatarNumber' => 5,
+        ));
+
+        $response = $this->client->get('/api/programmers');
+        $this->assertEquals(200, $response->getStatusCode());
+        $this->asserter()->assertResponsePropertyIsArray($response, 'programmers');
+        $this->asserter()->assertResponsePropertyCount($response, 'programmers', 2);
+        $this->asserter()->assertResponsePropertyEquals($response, 'programmers[1].nickname', 'CowboyCoder');
     }
 }
