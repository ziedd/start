diff --git a/app/config/services.yml b/app/config/services.yml
index 7b9173c..e4903dd 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -16,3 +16,9 @@ services:
     battle.power_manager:
         class: AppBundle\Battle\PowerManager
         arguments: ['@doctrine.orm.entity_manager']
+
+    api_exception_subscriber:
+        class: AppBundle\EventListener\ApiExceptionSubscriber
+        arguments: []
+        tags:
+            - { name: kernel.event_subscriber }
\ No newline at end of file
diff --git a/src/AppBundle/Api/ApiProblemException.php b/src/AppBundle/Api/ApiProblemException.php
index 991d43a..5512dd5 100644
--- a/src/AppBundle/Api/ApiProblemException.php
+++ b/src/AppBundle/Api/ApiProblemException.php
@@ -16,4 +16,9 @@ class ApiProblemException extends HttpException
 
         parent::__construct($statusCode, $message, $previous, $headers, $code);
     }
+
+    public function getApiProblem()
+    {
+        return $this->apiProblem;
+    }
 }
diff --git a/src/AppBundle/EventListener/ApiExceptionSubscriber.php b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
index d68c8e3..5dc9e2c 100644
--- a/src/AppBundle/EventListener/ApiExceptionSubscriber.php
+++ b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
@@ -6,6 +6,7 @@ use AppBundle\Api\ApiProblemException;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
+use Symfony\Component\HttpFoundation\JsonResponse;
 
 class ApiExceptionSubscriber implements EventSubscriberInterface
 {
@@ -15,6 +16,16 @@ class ApiExceptionSubscriber implements EventSubscriberInterface
         if (!$e instanceof ApiProblemException) {
             return;
         }
+
+        $apiProblem = $e->getApiProblem();
+
+        $response = new JsonResponse(
+            $apiProblem->toArray(),
+            $apiProblem->getStatusCode()
+        );
+        $response->headers->set('Content-Type', 'application/problem+json');
+
+        $event->setResponse($response);
     }
 
     public static function getSubscribedEvents()
