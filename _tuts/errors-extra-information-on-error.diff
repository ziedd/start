diff --git a/src/AppBundle/EventListener/ApiExceptionSubscriber.php b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
index fbe1620..4c2fbc9 100644
--- a/src/AppBundle/EventListener/ApiExceptionSubscriber.php
+++ b/src/AppBundle/EventListener/ApiExceptionSubscriber.php
@@ -24,6 +24,16 @@ class ApiExceptionSubscriber implements EventSubscriberInterface
             $apiProblem = new ApiProblem(
                 $statusCode
             );
+
+            /*
+             * If it's an HttpException message (e.g. for 404, 403),
+             * we'll say as a rule that the exception message is safe
+             * for the client. Otherwise, it could be some sensitive
+             * low-level exception, which should *not* be exposed
+             */
+            if ($e instanceof HttpExceptionInterface) {
+                $apiProblem->set('detail', $e->getMessage());
+            }
         }
 
         $response = new JsonResponse(
diff --git a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
index 365b36a..a4ede58 100644
--- a/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
+++ b/src/AppBundle/Tests/Controller/Api/ProgrammerControllerTest.php
@@ -171,5 +171,6 @@ EOF;
         $this->assertEquals('application/problem+json', $response->getHeader('Content-Type'));
         $this->asserter()->assertResponsePropertyEquals($response, 'type', 'about:blank');
         $this->asserter()->assertResponsePropertyEquals($response, 'title', 'Not Found');
+        $this->asserter()->assertResponsePropertyEquals($response, 'detail', 'No programmer found with nickname "fake"');
     }
 }
